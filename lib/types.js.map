{"version":3,"sources":["../src/types.js"],"names":[],"mappings":"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","file":"types.js","sourcesContent":["import * as _ from 'underscore'\nimport utilities from './utilities'\n\nconst moment = require('moment')\n// FIXME: the order is matter, why? probably need to find better way to check\n// what type of the current value is\n  , typeNames = [\n  'BooleanType'\n  , 'IntegerType'\n  , 'NullType'\n  , 'DateType'\n  , 'TimeType'\n  , 'DateTimeType'\n  , 'ArrayType'\n  , 'ObjectType'\n  , 'GeoPointType'\n  , 'GeoJSONType'\n  , 'NumberType'\n  , 'StringType'\n  , 'AnyType'\n]\n\nfunction AbstractType(field) {\n  this.js = typeof null\n  this.name = ''\n  this.format = 'default'\n  this.required = true\n  this.formats = ['default']\n\n  // `field` is the field schema.\n  this.field = field\n\n  if (field) {\n    this.format = field.format\n    this.required = !!_.result(field.constraints, 'required')\n  }\n  return this\n}\n\nAbstractType.prototype = {\n  /**\n   * Check if `value` can be cast as type `this.js`\n   *\n   * @param value\n   * @returns {Boolean}\n   */\n  cast(value) {\n    let format\n\n    // We can check on `constraints.required` before we cast\n    if (!this.required &&\n        _.contains(_.flatten([null, utilities.NULL_VALUES]), value)) {\n      return true\n    } else if (this.required && _.contains([null, undefined, ''], value)) {\n      return false\n    }\n\n    // Cast with the appropriate handler, falling back to default if none\n    if (!this.format) {\n      format = 'default'\n    } else {\n      if (this.format.indexOf('fmt') === 0) {\n        format = 'fmt'\n      } else {\n        format = this.format\n      }\n    }\n\n    const handler = `cast${format.charAt(0).toUpperCase() +\n                           format.substring(1)}`\n\n    if (this.hasFormat(format) && this[handler]) {\n      return this[handler](value)\n    }\n\n    return this.castDefault(value)\n  }\n  /**\n   * Check if the value can be cast to the type/format\n   *\n   * @param value\n   * @returns {Boolean}\n   */\n  , castDefault(value) {\n    if (this.typeCheck(value)) {\n      return true\n    }\n\n    try {\n      if (_.isFunction(this.js)) {\n        return this.js(value)\n      }\n    } catch (e) {\n      return false\n    }\n    return false\n  }\n  , hasFormat(format) {\n    return !!_.contains(this.formats, format)\n  }\n  /**\n   * Type check of value\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  , typeCheck(value) {\n    return !!(value instanceof this.js)\n  }\n}\n\nclass Abstract {\n  constructor(field) {\n    this.js = typeof null\n    this.name = ''\n    this.format = 'default'\n    this.required = true\n    this.formats = ['default']\n\n    // `field` is the field schema.\n    this.field = field\n\n    if (field) {\n      this.format = field.format\n      this.required = !!_.result(field.constraints, 'required')\n    }\n  }\n\n  /**\n   * Check if `value` can be cast as type `this.js`\n   *\n   * @param value\n   * @returns {Boolean}\n   */\n  cast(value) {\n    let format\n\n    // We can check on `constraints.required` before we cast\n    if (!this.required &&\n        _.contains(_.flatten([null, utilities.NULL_VALUES]), value)) {\n      return true\n    } else if (this.required && _.contains([null, undefined, ''], value)) {\n      return false\n    }\n\n    // Cast with the appropriate handler, falling back to default if none\n    if (!this.format) {\n      format = 'default'\n    } else {\n      if (this.format.indexOf('fmt') === 0) {\n        format = 'fmt'\n      } else {\n        format = this.format\n      }\n    }\n\n    const handler = `cast${format.charAt(0).toUpperCase() +\n                           format.substring(1)}`\n\n    if (this.hasFormat(format) && this[handler]) {\n      return this[handler](value)\n    }\n\n    return this.castDefault(value)\n  }\n\n  /**\n   * Check if the value can be cast to the type/format\n   *\n   * @param value\n   * @returns {Boolean}\n   */\n  castDefault(value) {\n    if (this.typeCheck(value)) {\n      return true\n    }\n\n    try {\n      if (_.isFunction(this.js)) {\n        return this.js(value)\n      }\n    } catch (e) {\n      return false\n    }\n    return false\n  }\n\n  hasFormat(format) {\n    return !!_.contains(this.formats, format)\n  }\n\n  /**\n   * Type check of value\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  typeCheck(value) {\n    return !!(value instanceof this.js)\n  }\n}\n\nclass StringType extends Abstract {\n  constructor(field) {\n    super(field)\n\n    this.js = 'string'\n    this.name = 'string'\n    this.formats = ['default', 'email', 'uri', 'binary']\n    this.emailPattern = new RegExp('[^@]+@[^@]+\\\\.[^@]+')\n    this.uriPattern = new RegExp('^http[s]?://')\n  }\n\n  castEmail(value) {\n    if (!this.typeCheck(value)) {\n      return false\n    }\n\n    if (!this.emailPattern.exec(value)) {\n      return false\n    }\n    return value\n  }\n\n  castUri(value) {\n    if (!this.typeCheck(value)) {\n      return false\n    }\n\n    if (!this.uriPattern.exec(value)) {\n      return false\n    }\n\n    return value\n  }\n\n  castBinary(value) {\n    if (!this.typeCheck(value)) {\n      return false\n    }\n\n    try {\n      return (new Buffer(value, 'base64')).toString()\n    } catch (e) {\n      return false\n    }\n  }\n\n  typeCheck(value) {\n    return typeof value === 'string'\n  }\n}\n\nclass IntegerType extends Abstract {\n  constructor(field) {\n    super(field)\n\n    this.js = Number\n    this.name = 'integer'\n  }\n\n  castDefault(value) {\n    return Number(value) == value && value % 1 === 0\n  }\n}\n\nclass NumberType extends Abstract {\n  constructor(field) {\n    super(field)\n\n    this.js = Number\n    this.name = 'number'\n    this.formats = ['default', 'currency']\n  }\n\n  castDefault(value) {\n    return Number(value) == value && value % 1 !== 0\n  }\n\n  castCurrency(value) {\n    const v = String(value).replace(new RegExp('[.,;$€]', 'g'), '')\n\n    // parseFloat() parse string even if there are non-digit characters\n    if ((new RegExp('[^\\\\d]+', 'g')).exec(v)) {\n      return false\n    }\n\n    try {\n      return isFinite(parseFloat(v))\n    } catch (e) {\n      return false\n    }\n  }\n}\n\nclass BooleanType extends Abstract {\n  constructor(field) {\n    super(field)\n\n    this.js = Boolean\n    this.name = 'boolean'\n    this.trueValues = utilities.TRUE_VALUES\n    this.falseValues = utilities.FALSE_VALUES\n  }\n\n  castDefault(value) {\n    if (this.typeCheck(value)) {\n      return true\n    }\n\n    const v = String(value).trim().toLowerCase()\n\n    return !!_.contains(_.union(this.trueValues, this.falseValues), v)\n  }\n}\n\nclass NullType extends Abstract {\n  constructor(field) {\n    super(field)\n\n    this.name = 'null'\n    this.nullValues = utilities.NULL_VALUES\n  }\n\n  castDefault(value) {\n    if (_.isNull(value)) {\n      return true\n    }\n    const v = value.trim().toLowerCase()\n    return !!_.contains(this.nullValues, v)\n  }\n}\n\nclass ArrayType extends Abstract {\n  constructor(field) {\n    super(field)\n\n    this.js = Array\n    this.name = 'array'\n  }\n\n  castDefault(value) {\n    if (this.typeCheck(value)) {\n      return true\n    }\n\n    try {\n      return this.typeCheck(JSON.parse(value))\n    } catch (e) {\n      return false\n    }\n  }\n}\n\nclass ObjectType extends Abstract {\n  constructor(field) {\n    super(field)\n\n    this.js = Object\n    this.name = 'object'\n  }\n\n  castDefault(value) {\n    if (_.isObject(value) && !_.isArray(value) && !_.isFunction(value)) {\n      return true\n    }\n\n    try {\n      return JSON.parse(value) instanceof this.js\n    } catch (e) {\n      return false\n    }\n  }\n}\n\nclass DateType extends Abstract {\n  constructor(field) {\n    super(field)\n\n    this.js = Object\n    this.name = 'date'\n    this.formats = ['default', 'any', 'fmt']\n    this.ISO8601 = 'YYYY-MM-DD'\n  }\n\n  castAny(value) {\n    let date\n\n    try {\n      date = moment(new Date(value))\n\n      if (date.isValid()) {\n        return date\n      }\n    } catch (e) {\n      return false\n    }\n    return false\n  }\n\n  castDefault(value) {\n    let date\n\n    try {\n      date = moment(value, this.ISO8601, true)\n\n      if (date.isValid()) {\n        return date\n      }\n    } catch (e) {\n      return false\n    }\n    return false\n  }\n\n  castFmt(value) {\n    let date\n\n    try {\n      date = moment(value, this.format.replace(/^fmt:/, ''), true)\n\n      if (date.isValid()) {\n        return date\n      }\n    } catch (e) {\n      return false\n    }\n    return false\n  }\n}\n\nclass TimeType extends DateType {\n  constructor(field) {\n    super(field)\n\n    this.js = Object\n    this.name = 'time'\n    this.formats = ['default', 'any', 'fmt']\n  }\n\n  castDefault(value) {\n    let date\n\n    try {\n      date = moment(value, 'HH:mm:ss', true)\n    } catch (e) {\n      return false\n    }\n\n    if (date.isValid()) {\n      return date\n    }\n\n    return false\n  }\n}\n\nclass DateTimeType extends DateType {\n  constructor(field) {\n    super(field)\n\n    this.js = Object\n    this.name = 'datetime'\n    this.formats = ['default', 'any', 'fmt']\n    this.ISO8601 = moment.ISO_8601\n  }\n}\n\nclass GeoPointType extends Abstract {\n  constructor(field) {\n    super(field)\n\n    this.name = 'geopoint'\n    this.formats = ['default', 'array', 'object']\n  }\n\n  castDefault(value) {\n    if (!this.typeCheck(value)) {\n      return false\n    }\n\n    if (_.isString(value)) {\n      return value.split(',').length === 2\n    }\n\n    if (_.isObject(value)) {\n      return value\n    }\n\n    try {\n      return JSON.parse(value)\n    } catch (e) {\n      return false\n    }\n  }\n\n  castArray() {\n    throw new Error('Not implemented')\n  }\n\n  castObject() {\n    throw new Error('Not implemented')\n  }\n\n  // Geo point may be passed as string object with keys or array\n  typeCheck(value) {\n    return _.isString(value) || _.isArray(value) || _.keys(value).length\n  }\n}\n\nclass GeoJSONType extends GeoPointType {\n  constructor(field) {\n    super(field)\n\n    this.js = Object\n    this.name = 'geojson'\n    this.formats = ['default', 'topojson']\n\n    this.spec = {\n      types: [\n        'Point'\n        , 'MultiPoint'\n        , 'LineString'\n        , 'MultiLineString'\n        , 'Polygon'\n        , 'MultiPolygon'\n        , 'GeometryCollection'\n        , 'Feature'\n        , 'FeatureCollection'\n      ]\n    }\n  }\n\n  castDefault(value) {\n    return super.castDefault(value)\n  }\n\n  castTopojson() {\n    throw new Error('Not implemented')\n  }\n\n  // Geo JSON is always an object\n  typeCheck(value) {\n    return _.isObject(value) && !_.isFunction(value)\n  }\n}\n\nclass AnyType extends Abstract {\n  constructor(field) {\n    super(field)\n\n    this.name = 'any'\n  }\n\n  cast() {\n    return true\n  }\n}\n\nconst Types = {\n  IntegerType\n  , NumberType\n  , BooleanType\n  , NullType\n  , ArrayType\n  , ObjectType\n  , DateType\n  , TimeType\n  , DateTimeType\n  , GeoPointType\n  , GeoJSONType\n  , TypeGuesser\n  , AnyType\n  , StringType\n}\n\n/**\n * Guess the type for a value\n *\n * @param options - TODO add description\n */\nfunction TypeGuesser(options) {\n  const typeOptions = options || {}\n\n  this.multiCast = function multiCast(values) {\n    const types = suitableTypes(values)\n      , suitableType = _.find(typeNames, type => _.indexOf(types, type) !== -1)\n    return (new Types[suitableType]()).name\n  }\n\n  this.cast = function cast(value) {\n    try {\n      return [\n        (new (_.find(availableTypes(), (T =>\n            new Types[T](typeOptions[(new Types[T]()).name] || {})\n              .cast(value)\n        )))()).name\n        , 'default'\n      ]\n    } catch (e) {\n      return null\n    }\n  }\n\n  return this\n\n  /**\n   * Return available types objects\n   *\n   * @returns {Array}\n   */\n  function availableTypes() {\n    return typeNames.map(type => Types[type])\n  }\n\n  /**\n   * Return types suitable to the provided multiple values\n   *\n   * @param values\n   * @returns {Array}\n   */\n  function suitableTypes(values) {\n    const filtered = values.filter(v => !_.isUndefined(v) || _.isEmpty(v))\n\n    if (filtered.length === 0) {\n      return ['AnyType']\n    }\n\n    const typeList = filtered.map(value => typeNames.filter(\n      T => {\n        const typeName = (new Types[T]()).name\n        return (new Types[T](typeOptions[typeName] || {})).cast(value)\n      }, this))\n    return _.reduce(typeList, (memo, types) => _.intersection(memo, types))\n  }\n}\n\nfunction TypeResolver() {\n  return this\n}\n\nTypeResolver.prototype = {\n  get(results) {\n    const counts = {}\n      , variants = _.uniq(results)\n\n    // Only one candidate... that's easy.\n    if (variants.length === 1) {\n      return { type: results[0][0], format: results[0][1] }\n    }\n\n    results.forEach((result) => {\n      counts[result] = (counts[result] || 0) + 1\n    })\n\n    // Tuple representation of  `counts`  dict, sorted  by  values  of\n    // `counts`\n    const sortedCounts = _.sortBy(_.pairs(counts), (cnt) => cnt[1]).reverse()\n\n    return {\n      type: sortedCounts[0][0].split(',')[0]\n      , format: sortedCounts[0][0].split(',')[1]\n    }\n  }\n}\n\nexport default Types\n"]}