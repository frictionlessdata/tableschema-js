{"version":3,"sources":["../src/models.js"],"names":[],"mappings":"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","file":"models.js","sourcesContent":["import {_} from 'underscore'\nimport {Promise} from 'bluebird'\nimport { ensure } from './ensure'\nimport * as types from './types'\nimport * as utilities from './utilities'\n\nconst DEFAULTS = {\n  constraints: { required: true }\n  , format: 'default'\n  , type: 'string'\n}\n/**\n * Model for a JSON Table Schema.\n *\n * Providers handy helpers for ingesting, validating and outputting\n * JSON Table Schemas: http://dataprotocols.org/json-table-schema/\n *\n * @param {string|dict} source: A filepath, url or dictionary that represents a\n *   schema\n *\n * @param {boolean} caseInsensitiveHeaders: if True, headers should be\n * considered case insensitive, and `SchemaModel` forces all\n * headers to lowercase when they are represented via a model\n * instance. This setting **does not** mutate the actual strings\n * that come from the the input schema source, so out put methods\n * such as as_python and as_json are **not** subject to this flag.\n */\n\nfunction SchemaModel(source, caseInsensitiveHeaders = false) {\n  this.source = source\n  this.caseInsensitiveHeaders = caseInsensitiveHeaders\n\n  const asJs = this.toJs()\n\n  // Manually use .loadSource() to get schema in case of URL passed instead of\n  // schema\n  if (asJs instanceof Promise) {\n    this.schemaPromise = asJs\n    return this\n  }\n\n  this.validateAndExpand(asJs)\n}\n\nSchemaModel.prototype = {\n  /**\n   * Check if value can be cast to fieldName's type\n   *\n   * @param fieldName\n   * @param value\n   * @param index\n   *\n   * @returns {Boolean}\n   */\n  cast(fieldName, value, index) {\n    return this.getType(fieldName, index || 0).cast(value)\n  }\n\n  /**\n   * Expand the schema with additional default properties\n   *\n   * @param schema\n   * @returns {*}\n   */\n  , expand(schema) {\n    return _.extend(\n      schema\n      , {\n        fields: (schema.fields || []).map((field) => {\n          const copyField = _.extend({}, field)\n\n          // Ensure we have a default type if no type was declared\n          if (!copyField.type) {\n            copyField.type = DEFAULTS.type\n          }\n\n          // Ensure we have a default format if no format was\n          // declared\n          if (!copyField.format) {\n            copyField.format = DEFAULTS.format\n          }\n\n          // Ensure we have a minimum constraints declaration\n          if (!copyField.constraints) {\n            copyField.constraints = DEFAULTS.constraints\n          } else if (_.isUndefined(field.constraints.required)) {\n            copyField.constraints.required =\n              DEFAULTS.constraints.required\n          }\n          return copyField\n        })\n      })\n  }\n\n  , fields() {\n    return this.asJs.fields\n  }\n  , foreignKeys() {\n    return this.asJs.foreignKeys\n  }\n\n  /**\n   * Return the `constraints` object for `fieldName`.\n   * @param {string} fieldName\n   * @param {integer} index\n   * @returns {object}\n   */\n  , getConstraints(fieldName, index = 0) {\n    return this.getField(fieldName, index).constraints\n  }\n\n  // Return the `field` object for `fieldName`.\n  // `index` allows accessing a field name by position, as JTS allows\n  // duplicate field names.\n  , getField(fieldName, index = 0) {\n    try {\n      return _.where(this.fields(), { name: fieldName })[index]\n    } catch (e) {\n      return null\n    }\n  }\n\n  // Return all fields that match the given type.\n  , getFieldsByType(typeName) {\n    return _.where(this.fields(), { type: typeName })\n  }\n\n  // Return the `type` for `fieldName`.\n  , getType(fieldName, index) {\n    const field = this.getField(fieldName, index || 0)\n    return this.typeMap[field.type](field)\n  }\n\n  /**\n   * Check if the field exists in the schema\n   *\n   * @param fieldName\n   * @returns {boolean}\n   */\n  , hasField(fieldName) {\n    return Boolean(this.getField(fieldName))\n  }\n\n  , headers() {\n    const raw = _.chain(this.asJs.fields).map(_.property('name')).value()\n\n    if (this.caseInsensitiveHeaders) {\n      return _.invoke(raw, 'toLowerCase')\n    }\n    return raw\n  }\n\n  // Load schema from URL passed in init\n  , loadSchema() {\n    return this.schemaPromise.then(this.validateAndExpand)\n  }\n\n  , primaryKey() {\n    return this.asJs.primaryKey\n  }\n\n  , requiredHeaders() {\n    const raw = _.chain(this.asJs.fields)\n      .filter(field => field.constraints.required)\n      .map(_.property('name'))\n      .value()\n\n    if (this.caseInsensitiveHeaders) {\n      return _.invoke(raw, 'toLowerCase')\n    }\n\n    return raw\n  }\n\n  // Return schema as an Object.\n  , toJs() {\n    try {\n      return utilities.loadJSONSource(this.source)\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * Map a JSON Table Schema type to a JTSKit type class\n   */\n  , typeMap: {\n    string: types.StringType\n    , number: types.NumberType\n    , integer: types.IntegerType\n    , boolean: types.BooleanType\n    , null: types.NullType\n    , array: types.ArrayType\n    , object: types.ObjectType\n    , date: types.DateType\n    , time: types.TimeType\n    , datetime: types.DateTimeType\n    , geopoint: types.GeoPointType\n    , geojson: types.GeoJSONType\n    , any: types.AnyType\n  }\n\n  , validateAndExpand(value) {\n    if (_.isUndefined(value) || _.isNull(value)) {\n      throw new Error('Invalid JSON')\n    }\n\n    if (!ensure(value)[0]) {\n      throw new Error('Invalid schema')\n    }\n\n    this.asJs = this.expand(value)\n\n    return this\n  }\n}\n\nmodule.exports = SchemaModel\n"]}